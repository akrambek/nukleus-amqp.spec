#
# Copyright 2016-2019 The Reaktivity Project
#
# The Reaktivity Project licenses this file to you under the Apache License,
# version 2.0 (the "License"); you may not use this file except in compliance
# with the License. You may obtain a copy of the License at:
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#

connect await ROUTED_CLIENT
        "nukleus://streams/amqp#0"
        option nukleus:window 8192
        option nukleus:transmission "half-duplex"

write nukleus:begin.ext ${amqp:beginEx()
                              .containerId("c1")
                              .channel(1)
                              .address("queue://queue")
                              .role(1)
                              .senderSettleMode(1)
                              .receiverSettleMode(0)
                              .build()}
connected

read nukleus:begin.ext ${amqp:beginEx()
                             .containerId("localhost")
                             .channel(1)
                             .address("queue://queue")
                             .role(0)
                             .senderSettleMode(1)
                             .receiverSettleMode(0)
                             .build()}

read nukleus:data.ext ${amqp:dataEx()
                            .deliveryId(0)
                            .deliveryTag("00")
                            .messageFormat(0)
                            .flags(1)
                            .annotation("x-opt-jms-dest", 0)
                            .annotation("x-opt-jms-msg-type", 5)
                            .messageId("message1")
                            .to("queue://queue")
                            .creationTime(1560802760460)
                            .build()}

read [0x00 0x53 0x77 0xa1 0x05] "Text!"
