#
# Copyright 2016-2020 The Reaktivity Project
#
# The Reaktivity Project licenses this file to you under the Apache License,
# version 2.0 (the "License"); you may not use this file except in compliance
# with the License. You may obtain a copy of the License at:
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#

property message250 ${amqp:randomBytes(250)}

connect await ROUTED_CLIENT
        "nukleus://streams/amqp#0"
        option nukleus:window 8192
        option nukleus:transmission "duplex"

write nukleus:begin.ext ${amqp:beginEx()
                             .typeId(nukleus:id("amqp"))
                             .address("clients")
                             .capabilities("RECEIVE_ONLY")
                             .senderSettleMode("SETTLED")
                             .receiverSettleMode("FIRST")
                             .build()}

read nukleus:begin.ext ${amqp:beginEx()
                              .typeId(nukleus:id("amqp"))
                              .address("clients")
                              .capabilities("RECEIVE_ONLY")
                              .senderSettleMode("SETTLED")
                              .receiverSettleMode("FIRST")
                              .build()}
connected

read nukleus:data.ext ${amqp:dataEx()
                            .typeId(nukleus:id("amqp"))
                            .deliveryId(0)
                            .deliveryTag("0")
                            .messageFormat(0)
                            .flags("SETTLED")
                            .annotation("annotation1", "1")
                            .annotation("annotation2", "2")
                            .annotation("annotation3", "3")
                            .annotation("annotation4", "4")
                            .annotation("annotation5", "5")
                            .messageId("message1")
                            .userId("user1")
                            .to("clients")
                            .subject("subject1")
                            .replyTo("localhost")
                            .correlationId("correlationId1")
                            .contentType("content_type")
                            .contentEncoding("content_encoding")
                            .absoluteExpiryTime(12345)
                            .creationTime(12345)
                            .groupId("group_id1")
                            .groupSequence(1)
                            .replyToGroupId("reply_group_id")
                            .property("application", "property1")
                            .property("application", "property2")
                            .property("application", "property3")
                            .build()}

read ${message250}

connect await ROUTED_CLIENT
        "nukleus://streams/amqp#0"
        option nukleus:window 8192
        option nukleus:transmission "duplex"

write nukleus:begin.ext ${amqp:beginEx()
                              .typeId(nukleus:id("amqp"))
                              .address("clients")
                              .capabilities("RECEIVE_ONLY")
                              .senderSettleMode("SETTLED")
                              .receiverSettleMode("FIRST")
                              .build()}

read nukleus:begin.ext ${amqp:beginEx()
                             .typeId(nukleus:id("amqp"))
                             .address("clients")
                             .capabilities("RECEIVE_ONLY")
                             .senderSettleMode("SETTLED")
                             .receiverSettleMode("FIRST")
                             .build()}
connected

read nukleus:data.ext ${amqp:dataEx()
                            .typeId(nukleus:id("amqp"))
                            .deliveryId(0)
                            .deliveryTag("0")
                            .messageFormat(0)
                            .flags("SETTLED")
                            .build()}

read ${message250}

read closed
