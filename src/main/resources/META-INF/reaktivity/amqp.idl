/*
 * Copyright 2016-2019 The Reaktivity Project
 *
 * The Reaktivity Project licenses this file to you under the Apache License,
 * version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at:
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */
scope amqp
{
    union AmqpMessageId switch (uint8)
    {
        case 1: uint64 ulong;
        case 2: amqp::AmqpBinary uuid;
        case 3: amqp::AmqpBinary binary;
        case 4: string stringtype;
    }

    union AmqpMessageProperty switch (uint8)
    {
        case 0: amqp::AmqpMessageId messageId;
        case 1: amqp::AmqpBinary userId;
        case 2: string to;
        case 3: string subject;
        case 4: string replyTo;
        case 5: amqp::AmqpMessageId correlationId;
        case 6: string contentType;
        case 7: string contentEncoding;
        case 8: int64 absoluteExpiryTime;
        case 9: int64 creationTime;
        case 10: string groupId;
        case 11: int32 groupSequence;
        case 12: string replyToGroupId;
    }

    union AmqpAnnotationKey switch (uint8)
    {
        case 1: uint64 id;
        case 2: string name;
    }

    struct AmqpAnnotation
    {
        amqp::AmqpAnnotationKey key;
        amqp::AmqpBinary value;
    }

    struct AmqpBinary
    {
        uint16 length;
        octets[length] bytes;
    }

    enum AmqpMessagePropertyKind
    {
        MESSAGE_ID,
        USER_ID,
        TO,
        SUBJECT,
        REPLY_TO,
        CORRELATION_ID,
        CONTENT_TYPE,
        CONTENT_ENCODING,
        ABSOLUTE_EXPIRY_TIME,
        CREATION_TIME,
        GROUP_ID,
        GROUP_SEQUENCE,
        REPLY_TO_GROUP_ID
    }

    enum AmqpRole
    {
        SENDER,
        RECEIVER,
        BOTH
    }

    enum AmqpTransferFlag
    {
        BATCHABLE,
        ABORTED,
        RESUME,
        SETTLED
    }

    enum AmqpSenderSettleMode
    {
        UNSETTLED,
        SETTLED,
        MIXED
    }

    enum AmqpReceiverSettleMode
    {
        FIRST,
        SECOND
    }

    scope control
    {
        struct AmqpRouteEx
        {
            string targetAddress;
            amqp::AmqpRole role;
        }
    }

    scope stream
    {
        struct AmqpBeginEx
        {
            string containerId;
            uint16 channel;
            string address;
            amqp::AmqpRole role;
            amqp::AmqpSenderSettleMode senderSettleMode;
            amqp::AmqpReceiverSettleMode receiverSettleMode;
        }

        struct AmqpDataEx
        {
            uint32 deliveryId;
            amqp::AmqpBinary deliveryTag;
            uint32 messageFormat;
            uint8 flags;   // set of AmqpTransferFlag
            list<amqp::AmqpAnnotation> annotations;
            list<amqp::AmqpMessageProperty> properties;
        }

        struct AmqpWindowEx
        {
            // session flow control
            uint32 nextIncomingId;
            uint32 incomingWindow;
            uint32 nextOutgoingId;
            uint32 outgoingWindow;

            // link flow control
            uint32 deliveryCount;
            uint32 linkCredit;
        }

        struct AmqpAbortEx
        {
            string condition;
        }
    }
}
