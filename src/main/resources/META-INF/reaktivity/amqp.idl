/*
 * Copyright 2016-2020 The Reaktivity Project
 *
 * The Reaktivity Project licenses this file to you under the Apache License,
 * version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at:
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */
scope amqp
{
    option byteorder network;

    struct AmqpBinary
    {
        uint16 length;
        octets[length] bytes;
    }

    union AmqpMessageId switch (uint8)
    {
        case 1: uint64 ulong;
        case 2: AmqpBinary uuid;
        case 3: AmqpBinary binary;
        case 4: string8 stringtype;
    }

    union AmqpMessageProperty switch (uint8)
    {
        case 0: AmqpMessageId messageId;
        case 1: AmqpBinary userId;
        case 2: string8 to;
        case 3: string8 subject;
        case 4: string8 replyTo;
        case 5: AmqpMessageId correlationId;
        case 6: string8 contentType;
        case 7: string8 contentEncoding;
        case 8: int64 absoluteExpiryTime;
        case 9: int64 creationTime;
        case 10: string8 groupId;
        case 11: int32 groupSequence;
        case 12: string8 replyToGroupId;
    }

    union AmqpAnnotationKey switch (uint8)
    {
        case 1: uint64 id;
        case 2: string8 name;
    }

    struct AmqpAnnotation
    {
        AmqpAnnotationKey key;
        AmqpBinary value;
    }

    enum AmqpMessagePropertyKind
    {
        MESSAGE_ID,
        USER_ID,
        TO,
        SUBJECT,
        REPLY_TO,
        CORRELATION_ID,
        CONTENT_TYPE,
        CONTENT_ENCODING,
        ABSOLUTE_EXPIRY_TIME,
        CREATION_TIME,
        GROUP_ID,
        GROUP_SEQUENCE,
        REPLY_TO_GROUP_ID
    }

    enum AmqpCapabilities (uint8)
    {
        SEND_ONLY(1),
        RECEIVE_ONLY(2),
        SEND_AND_RECEIVE(3)
    }

    enum AmqpTransferFlag
    {
        BATCHABLE,
        ABORTED,
        RESUME,
        SETTLED
    }

    enum AmqpSenderSettleMode
    {
        UNSETTLED,
        SETTLED,
        MIXED
    }

    enum AmqpReceiverSettleMode
    {
        FIRST,
        SECOND
    }

    scope control
    {
        struct AmqpRouteEx
        {
            string8 targetAddress;
            AmqpCapabilities capabilities = SEND_AND_RECEIVE;
        }
    }

    scope stream
    {
        struct AmqpBeginEx extends core::stream::Extension
        {
            string8 address;
            AmqpCapabilities capabilities = SEND_AND_RECEIVE;
            AmqpSenderSettleMode senderSettleMode;
            AmqpReceiverSettleMode receiverSettleMode;
        }

        struct AmqpDataEx extends core::stream::Extension
        {
            uint32 deliveryId;
            AmqpBinary deliveryTag;
            uint32 messageFormat;
            uint8 flags;   // set of AmqpTransferFlag
            AmqpAnnotation[] annotations;
            AmqpMessageProperty[] properties;
        }

        struct AmqpWindowEx extends core::stream::Extension
        {
            // session flow control
            uint32 nextIncomingId;
            uint32 incomingWindow;
            uint32 nextOutgoingId;
            uint32 outgoingWindow;

            // link flow control
            uint32 deliveryCount;
            uint32 linkCredit;
        }

        struct AmqpAbortEx extends core::stream::Extension
        {
            string8 condition;
        }

        struct AmqpFlushEx extends core::stream::Extension
        {
            AmqpCapabilities capabilities = SEND_AND_RECEIVE;
        }
    }
}
